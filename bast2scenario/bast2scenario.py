import pandas as pd
import config as c
import xml.etree.ElementTree as ET

print("Selected HOUR:", c.HOUR)
print("Selected DATE:", c.DATE)
print()

if c.HOUR == 0:
    hour_range = range(1, 25)
else:
    hour_range = range(c.HOUR, c.HOUR + 1)

# root of reference .rou.xml file
root = ET.parse(c.REF_FILE + ".rou.xml").getroot()

flow_time = c.FLOW_WARMUP

# Create and write .rou.xml
with open(c.OUT_FILE + '.rou.xml', "w") as outfile:
    outfile.write('<?xml version="1.0" encoding="UTF-8"?>\n\n')
    outfile.write('<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://sumo.dlr.de/xsd/routes_file.xsd">\n\n')
    outfile.write("""    <!--
        truck, semitrailer and truck_trailer size calculated by using inner size from [0]
        and adding 2m length and 1m height according to [1]
        
        [0] https://www.alpensped.de/leistungen/fuhrpark/
        [1] https://www.wuerth-transporte.de/1.html
    -->
""")

    # transfer vTypes from reference .rou.xml file
    for vtype in root.findall('vType'):
        outfile.write("    " + ET.tostring(vtype, encoding='utf-8', method='xml').strip().decode('utf-8') + "\n")
    outfile.write('\n')

    # transfer routes from reference .rou.xml file
    for route in root.findall('route'):
        outfile.write("    " + ET.tostring(route, encoding='utf-8', method='xml').strip().decode('utf-8') + "\n")
    outfile.write('\n')

first_hour = True

# for each hour to generate
for h in hour_range:
    with open(c.OUT_FILE + '.rou.xml', "a") as outfile:
        outfile.write(f'    <!--\n')
        outfile.write(f'        Flows generated by bast2scenario-tool.\n')
        outfile.write(f'        Reference file: "{c.REF_FILE}.rou.xml"\n')
        outfile.write(f'        Date: {c.DATE}\n')
        outfile.write(f'        Hour: {h}\n')
        if first_hour:
            outfile.write(f'        Warmup: {c.FLOW_WARMUP}\n')
            first_hour = False
        outfile.write(f'    -->\n')
        outfile.write(f'\n')

    # Traffic values of given day
    traffic = {}

    # Import bast-data
    for _, zst in c.STATIONS.iterrows():
        csv = pd.read_csv(
            c.DATA_DIR + "/zst" + str(zst.stationId) + "_" + str(c.YEAR) + ".csv",
            sep=";"
        )

        # Filter rows for given date
        csv = csv[csv['Datum'] == c.DATE]

        # Filter rows for given hour
        csv = csv[csv['Stunde'] == h]

        # Extract incoming traffic from csv
        station_traffic = {}
        for col in c.CSV_COLUMNS:
            station_traffic[col] = csv.iloc[0][col + "_" + zst.I]

        # LmA and Sat are combined in the data (Lzg = LmA + Sat)
        # LmA can't be calculated, if Lzg or Sat is missing (equals -1) => Set LmA to -1
        if station_traffic["Lzg"] == -1 or station_traffic["Sat"] == -1:
            station_traffic["LmA"] = -1
        else:
            station_traffic["LmA"] = station_traffic["Lzg"] - station_traffic["Sat"]
        del station_traffic["Lzg"]

        traffic[zst.stationId] = station_traffic

    traffic = pd.DataFrame(traffic)


    # if only one traffic group is missing, it can be computed using the other two
    # IMPORTANT: Don't use PLZ and Lkw, unless it is really necessary.
    # These values may be calculated differently by different counting stations.
    # e.g.: Lkw may or may not include PmA
    for vtype, col in traffic.iteritems():
        if [col[tg] for tg in ["KFZ", "PLZ", "Lkw"]].count(-1) == 1:
            if col["KFZ"] == -1:
                col["KFZ"] = col["PLZ"] + col["Lkw"]
            elif col["PLZ"] == -1:
                col["PLZ"] = col["KFZ"] - col["Lkw"]
            elif col["Lkw"] == -1:
                col["Lkw"] = col["KFZ"] - col["PLZ"]


    # Make PLZ and Lkw as consistent as possible (see important above)
    # If all detailed values are set, calc sum and set PLZ/Lkw
    for station_id, col in traffic.iteritems():
        if not col.eq(-1).any():
            pkw_val = sum([v for k, v in col.iteritems() if k in c.PKW_COLUMNS])
            lkw_val = sum([v for k, v in col.iteritems() if k in c.LKW_COLUMNS])
            traffic[station_id]["PLZ"] = pkw_val
            traffic[station_id]["Lkw"] = lkw_val


    # Fix missing values
    # If a value is missing, it will be estimated based on all other columns, where the value is present
    for vtype, row in traffic.eq(-1).iterrows():
        if row.any():
            missing_cols = [k for k, v in row.iteritems() if v]
            available_cols = traffic.keys().difference(missing_cols).tolist()

            if len(missing_cols) > len(available_cols):
                print("WARNING! Values for '" + vtype + "' are available in " + str(len(available_cols)) + " columns, but are missing in " + str(len(missing_cols)) + " columns.")

            for mc in missing_cols:
                reference_col = "PLZ" if vtype in c.PKW_COLUMNS else "Lkw"
                vtype_mean = traffic.transpose()[vtype].drop(missing_cols).sum()/traffic.transpose()[reference_col].drop(missing_cols).sum()
                traffic[mc][vtype] = round(vtype_mean * traffic[mc][reference_col])


    # Make PLZ and Lkw really consistent, since all values should be set now
    for station_id, col in traffic.iteritems():
        if not col.eq(-1).any():
            pkw_val = sum([v for k, v in col.iteritems() if k in c.PKW_COLUMNS])
            lkw_val = sum([v for k, v in col.iteritems() if k in c.LKW_COLUMNS])
            traffic[station_id]["PLZ"] = pkw_val
            traffic[station_id]["Lkw"] = lkw_val


    # Get the flow-distribution for all stations, i.e. the number of vehicles per hour that drive
    # from one station (called in-station) to another station (called out-station)
    flows = root.findall('flow')
    flow_distribution = {}
    for flow in flows:
        route = flow.get('route')
        split_pos = route.find('-')

        in_station = route[0 : split_pos]
        out_station = route[split_pos + 1 : ]

        if (in_station not in flow_distribution):
            flow_distribution[in_station] = {}

        flow_distribution[in_station][out_station] = float(flow.get('vehsPerHour'))


    # Recalculate the flow-distribution from vehicles per hour to percentage
    for in_station, out_stations in flow_distribution.items():
        in_sum = 0
        for out_station, vehsPerHour in out_stations.items():
            in_sum += vehsPerHour
        
        for out_station, vehsPerHour in out_stations.items():
            flow_distribution[in_station][out_station] /= in_sum


    # Create and write flows
    with open(c.OUT_FILE + '.rou.xml', "a") as outfile:
        for in_station, out_stations in flow_distribution.items():
            # Check configured traffic
            if sum(out_stations.values()) != 1:
                print("\nWARNING! Traffic values for station " + in_station + " sum up to " + str(sum(out_stations.values())) + ", but should be 1.\n")

            # Get ID of in_station
            in_station_id = int(c.STATIONS[c.STATIONS['short'].str.contains(in_station)]["stationId"])

            for out_station, flow in out_stations.items():
                for bast_vehicle, ibr_vehicle in c.VEHICLE_MAPPING.items():
                    vehsPerHour = traffic[in_station_id][bast_vehicle] * flow_distribution[in_station][out_station]
                    if vehsPerHour == 0: continue
                    flow = '    <flow '
                    flow += 'route="' + in_station + '-' + out_station + '" '
                    flow += 'type="' + ibr_vehicle + '" '
                    flow += 'id="' + str(c.DATE) + '_' + str(h).zfill(2) + '_flow_' + in_station + '-' + out_station + '_' + ibr_vehicle + '" '
                    flow += 'probability="'+ '{0:.20f}'.format(vehsPerHour/3600) + '" '
                    # 'begin' and 'end' attributes are only added here, if not specified in FLOW_PARAMS
                    # If a whole day is generated, FLOW_WARMUP is only added to the first hour
                    if (c.HOUR == 0 and h == 1) or (c.HOUR > 0):
                        if ('begin' not in c.FLOW_PARAMS.keys()):
                            flow += 'begin="' + str(0) + '" '
                        if ('end' not in c.FLOW_PARAMS.keys()):
                            flow += 'end="' + str(flow_time + 3599) + '" '
                    else:
                        if ('begin' not in c.FLOW_PARAMS.keys()):
                            flow += 'begin="' + str(flow_time) + '" '
                        if ('end' not in c.FLOW_PARAMS.keys()):
                            flow += 'end="' + str(flow_time + 3599) + '" '
                    for k, v in c.FLOW_PARAMS.items():
                        flow += str(k) + '="' + str(v) + '" '
                    flow += '/>\n'
                    outfile.write(flow)
                outfile.write('\n')
    
    flow_time += 3600
    

with open(c.OUT_FILE + '.rou.xml', "a") as outfile:
    outfile.write('</routes>')

print("Created " + c.OUT_FILE + ".rou.xml")

# Create and write .sumocfg
tree = ET.parse(c.REF_FILE + ".sumocfg")
root = tree.getroot()

for mod, value in c.SUMOCFG_MODS.items():
    mod_splitted = mod.split('.')
    xml_pointer = root
    for path in mod_splitted[:-1]:
        if xml_pointer.find(path) is None:
            xml_pointer.append(ET.Element(path))
        xml_pointer = xml_pointer.find(path)
    xml_pointer.set(mod_splitted[-1], str(value))

with open(c.OUT_FILE + '.sumocfg', "wb") as f:
    tree.write(f)
print("Created " + c.OUT_FILE + ".sumocfg")


